# Generated by Django 2.0.3 on 2018-09-13 14:26

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('birthday', models.DateField(null=True)),
                ('phone_number', models.CharField(default=None, max_length=17, null=True, validators=[django.core.validators.RegexValidator(message='Phone number must be entered in the format: Up to 15 digits allowed.', regex='^\\+{0,2}\\d{9,15}$')])),
                ('street', models.CharField(default=None, max_length=255, null=True)),
                ('city', models.CharField(default=None, max_length=255, null=True)),
                ('zip_code', models.CharField(default=None, max_length=255, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CanViewRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateField(auto_now_add=True)),
                ('last_edited', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=200)),
                ('note', models.TextField(max_length=4096, null=True)),
                ('phone_number', models.CharField(default=None, max_length=17, null=True, validators=[django.core.validators.RegexValidator(message='Phone number must be entered in the format: Up to 15 digits allowed.', regex='^\\+{0,2}\\d{9,15}$')])),
                ('birthday', models.DateField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('visible', models.BooleanField()),
                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='group_created', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='HasPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_has_permission', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='group_has_permission', to='api.Group')),
            ],
        ),
        migrations.CreateModel(
            name='OriginCountry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('state', models.CharField(choices=[('st', 'safe third country'), ('ot', 'other third country'), ('so', 'safe country')], max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Record',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateField(auto_now_add=True)),
                ('last_edited', models.DateTimeField(auto_now_add=True)),
                ('first_contact_date', models.DateField(default=None, null=True)),
                ('last_contact_date', models.DateTimeField(default=None, null=True)),
                ('record_token', models.CharField(max_length=50, unique=True)),
                ('note', models.CharField(max_length=4096)),
                ('state', models.CharField(choices=[('op', 'open'), ('cl', 'closed'), ('wa', 'waiting')], max_length=2)),
                ('client', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='records', to='api.Client')),
                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='records_created', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Rlc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('uni_tied', models.BooleanField(default=False)),
                ('part_of_umbrella', models.BooleanField(default=True)),
                ('note', models.CharField(default='', max_length=4000, null=True)),
                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rlc_created', to=settings.AUTH_USER_MODEL)),
                ('rlc_members', models.ManyToManyField(related_name='rlc_members', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
            ],
        ),
        migrations.AddField(
            model_name='record',
            name='from_rlc',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='record_from_rlc', to='api.Rlc'),
        ),
        migrations.AddField(
            model_name='record',
            name='tagged',
            field=models.ManyToManyField(blank=True, related_name='tagged', to='api.Tag'),
        ),
        migrations.AddField(
            model_name='record',
            name='working_on_record',
            field=models.ManyToManyField(blank=True, related_name='working_on_record', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='haspermission',
            name='permission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='in_has_permission', to='api.Permission'),
        ),
        migrations.AddField(
            model_name='haspermission',
            name='permission_for_group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='permission_for_group', to='api.Group'),
        ),
        migrations.AddField(
            model_name='haspermission',
            name='permission_for_rlc',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='permission_for_rlc', to='api.Rlc'),
        ),
        migrations.AddField(
            model_name='haspermission',
            name='permission_for_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='permission_for_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='haspermission',
            name='rlc_has_permission',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rlc_has_permission', to='api.Rlc'),
        ),
        migrations.AddField(
            model_name='haspermission',
            name='user_has_permission',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_has_permission', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='group',
            name='from_rlc',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='group_from_rlc', to='api.Rlc'),
        ),
        migrations.AddField(
            model_name='group',
            name='group_members',
            field=models.ManyToManyField(related_name='group_members', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='client',
            name='origin_country',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='clients', to='api.OriginCountry'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
